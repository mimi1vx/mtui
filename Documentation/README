Maintenance Test Update Installer
==================================


Purpose
-------------------------

The Maintenance Test Update Installer (MTUI) automates common task in the
maintenance update process and provides handy shortcuts and commands
for update testing and verifying. While MTUI provides a framework for
testing, updating and reporting, the tester does not need to handle
different console terminals, hosts or package versions himself. The
tester could now focus on the bug and regression testing while leaving
most of the tools overhead behind. This should speed up the testing and
make the testing workflows better comparable. All issued commands are
stored for later processing, i.e. for completing the maintenance template
or for reference on subsequent updates.


Interface
-------------------------

Parameters
-------------------------

In the current state, MTUI provides a commandline interface and an
interactive shell for command processing. Several basic information
are set by the following command line parameter:


	-t,--template=           template directory

Specifying the template directory in which the testing directories
are checked out from SVN. If none is given, the current directory
is used. However, this is typically set to another directory
like --template=~/testing/templates. For an improved usability,
the environment variable TEMPLATE_DIR is also processed. Instead of
specifying the directory each time on the commandline, one could set
template_dir="~/testing/templates" in ~/.mtuirc. The commandline
parameter takes precedence over the environment variable if both are given.

	-l,--location            set the refhost location

Specify the refhost location defined in refhosts.xml. If the location itself
doesn't exist, the default location is used instead. If a required system
doesn't exist, the respecting system is loaded from the default location.

	-m,--md5=                md5 update identifier

This parameter simply specifies the md5 hash for the update
which could be retrieved on the SWAMP QA view. The template path is then
composed of the directory parameter and md5 update hash.
($directory/$md5/log). If the template is not yet checked out
from SVN, MTUI tries to fetch it. When starting MTUI without -m parameter,
a template could be loaded with the load_template command afterwards.

	-n,--noninteractive      noninteractive update

When set, MTUI is run in an noninteractive mode without a command shell.
MTUI automatically applies the update and exports the results to the
maintenance template before it quits. User input is not required.

	-d,--debug               enable debugging output

Enables MTUI's debugging output. There might be a use case for debug output
when testing a command which runs for a longer time as the command output is
then printed in realtime instead of after the command has finished. However,
it's more reasonable to use the set_log_level (see below) command then. The
default loglevel is INFO while -d sets it to DEBUG.

	-w,--connection_timeout

Sets the execution timeout to the specified value (default: 300). When the
timeout limit was hit the user is asked to wait for the current command to
return or to proceed with the next one. The timeout value is set in seconds.
To disable the timeout set it to "0".

	-a,--autoadd	cumulative autoadd SUT based on attributes

Cumulatively adds machines to the target host list based on given
attributes.

   Example:

   # mtui -a sles -a 11sp1

	-p,--prerun		path to prerun script

Runs MTUI commands prior to starting the interactive shell or the update
process. User input is not required if in noninteractive mode (-n parameter).

	-h,--help                help

Prints the parameter list

Configuration File
-------------------------
MTUI configuration files can either be stored in /etc/ or the user's home
directory. As a general rule, command line parameters take precedence over
configuration file values. Additionally, values in /etc/mtui.cfg are
overridden by the tester's personal file in ~/.mtuirc.

Shell
-------------------------
The MTUI shell is comparable to a bash shell as both use the readline backend
for command processing. For all shell commands, autocompletion and line editing
features are enabled. Even a command history and history searching are
available. For a short overview of procedures and help texts, the "help"
command is also available (i.e. help add_host prints a short description of
the add_host command). Running processes can be interrupted by pressing CTRL-C.
However, it blocks until all currently running commands have finished.

Host Management
*****************
- add_host
Adds another machine to the target host list. The system type needs to be
specified as well.

                add_host <hostname>,<system>
                Keyword arguments:
                hostname -- address of the target host (should be the FQDN)
                system   -- system type, ie. sles11sp1-i386

- remove_host
Disconnects from host and remove host from list. Warning: The host log is
purged as well. If the tester wants to preserve the log, it's better to use
the set_host_state command instead and set the host to "disabled". Multible
hosts can be specified.

		remove_host <hostname>,hostname,...
		Keyword arguments:
		hostname -- hostname from the target list

- autoadd
Adds hosts to the target host list. The host is mapped by the specified
attributes. A attribute tag could also be a system type name like
sles11sp1-i386 or a hostname.

		autoadd <attribute> [attribute ...]
		Keyword arguments:
		attribute-- host attributes like architecture or product

- search_hosts
Seach hosts by by the specified attributes. A attribute tag could also be a
system type name like sles11sp1-i386 or a hostname.

		search_hosts <attribute> [attribute ...]
		Keyword arguments:
		attribute-- host attributes like architecture or product

- list_hosts
Lists all connected hosts including the system types and their current state.
State could be "Enabled", "Disabled" or "Dryrun".

		list_hosts
		Keyword arguments:
		None

- list_history
Lists a history of mtui events on the target hosts like installing or
updating packages. Date, username and event is shown.
Events could be filtered with the event parameter.

                list_history [hostname,...][,event]
                Keyword arguments:
                hostname -- hostname from the target list or "all"
                event    -- connect, disconnect, install, update, downgrade
                None

- list_locks
Lists lock state of all connected hosts

		list_hosts
		Keyword arguments:
		None


- set_host_state
Sets the host state to "Enabled", "Disabled" or "Dryrun". A host set to
"Enabled" runs all issued commands while a "Disabled" host or a host set to
"Dryrun" doesn't run any command on the host. The difference between
"Disabled" and "Dryrun" is that on "Dryrun" hosts the issued commands are
printed to the console while "Disabled" doesn't print anything.
Additionally, the execution mode of each host could be set to "parallel"
(default) or "serial". All commands which are designed to run in parallel are
influenced by this option (like to run command)
The commands accepts multiple hostnames followed by the wanted state.

		set_host_state <hostname>,hostname,...,<state>
		Keyword arguments:
		hostname -- hostname from the target list
		state    -- enabled, disabled, dryrun, parallel, serial


- set_host_lock
Lock host for exclusive usage. This locks all repository transactions
like enabling or disabling the testing repository on the target hosts.
The Hosts are locked with a timestamp, the UID and PID of the session.
This influences the update process of concurrent instances, use with care.
Enabled locks are automatically removed when exiting the session.
To lock the run command on other sessions as well, it's necessary to
set a comment.

		set_host_lock <hostname>[,hostname,...],<state>
		Keyword arguments:
		hostname -- hostname from the target list
		state    -- enabled, disabled

- set_timeout
Changes the current execution timeout for a target host. When the timeout
limit was hit the user is asked to wait for the current command to return
or to proceed with the next one.
The timeout value is set in seconds. To disable the timeout set it to "0".

		set_timeout <hostname,timeout>
		Keyword arguments:
		hostname -- hostname from the target list or "all"
		timeout  -- timeout value in seconds

- list_timeout
Prints the current timeout values per host in seconds.
		
		list_timeout
		Keyword arguments:
		None

Update Management
*****************
- install
Installs packages from the current active repository.
The repository should be set with the set_repo command beforehand.

		install <hostname>[,hostname,...],<package>[ package ...]
		Keyword arguments:
		hostname -- hostname from the target list or "all"
		package  -- package name

- uninstall
Removes packages from the system.

		uninstall <hostname>[,hostname,...],<package>[ package ...]
		Keyword arguments:
		hostname -- hostname from the target list or "all"
		package  -- package name

- prepare
Installs missing or outdated packages from the UPDATE repositories.
This is also run by the update procedure before applying the updates.
If "force" is set, packages are forced to be installed on package
conflicts. If "installed" is set, only installed packages are
prepared. If "testing" is set, packages are installed from the TESTING
repositories.

		prepare <hostname>[,hostname,...][,force][,installed][,testing]
		Keyword arguments:
		hostname -- hostname from the target list or "all"

- downgrade
Downgrades all related packages to the last released version (uses the UPDATE
channel). This does not work for SLES 9 hosts, though.

		downgrade <hostname>
		Keyword arguments:
		hostname -- hostname from the target list or "all"

- update
Applies the testing update to the target hosts. While updating the machines,
the pre-, post- and compare scripts are run before and after the update
process. If the update adds new packages to the channel, the "newpackage"
parameter triggers the package installation right after the update.
To skip the preparation procedure, append "noprepare" to the argument list.

		update <hostname>[,newpackage][,noprepare]
		Keyword arguments:
		hostname -- hostname from the target list or "all"

- export
Exports the gathered update data to template file. This includes the pre/post
package versions and the update log. An output file could be specified, if none
is specified, the output is written to the current testing template.
To export a specific updatelog, provide the hostname as parameter.

		export [filename][,hostname]
		Keyword arguments:
		filename -- output template file name
		hostname -- host update log to export
		force    -- overwrite template if it exists

Testing Commands
*****************
- run
Runs a command on a specified host or on all enabled targets if 'all' is given
as hostname. The command timeout is set to 5 minutes which means, if there's
no output on stdout or stderr for 5 minutes, a timeout exception is thrown.
The commands are run in parallel on every target or in serial mode when set
with "set_host_state". After the call returned, the output (including the
return code) of each host is shown on the console.
Please be aware that no interactive commands can be run with this
procedure.

		run <hostname[,hostname,...],command>
		Keyword arguments:
		hostname -- hostname from the target list or "all"

- shell
Invokes a remote root shell on the target host.
The terminal size is set once, but isn't adapted on subsequent changes.

		shell <hostname>
		Keyword arguments:
		hostname -- hostname from the target list

- put
Uploads files to all enabled hosts. Multiple files can be selected with special
patterns according to the rules used by the Unix shell (i.e. *, ?, []). The
complete filepath on the remote hosts is shown after the upload. "put" has also
directory completion.

		put <local filename>
		Keyword arguments:
		filename -- file to upload to the target hosts

- get
Downloads a file from all enabled hosts. Multiple files can not be selected.
Files are saved in the $TEMPLATE_DIR/downloads/ subdirectory with the hostname
as file extension.

		get <remote filename>
		Keyword arguments:
		filename -- file to download from the target hosts

- set_repo
Sets the software repositories to UPDATE or TESTING. Multiple hostnames can
be given. On the target hosts, the rep-clean.sh script is spawned to set the
repositories accordingly.

		set_repo <hostname>,hostname,...,<repository>
		Keyword arguments:
		hostname   -- hostname from the target list or "all"
		repository -- repository, TESTING or UPDATE

- show_log
Prints the command protocol from the specified hosts. This might be handy for
the tester as well, as one can simply dump the command history to the
reproducer section of the template.

		show_log [hostname]
		Keyword arguments:
		hostname -- hostname from the target list or "all"

- testsuite_run
Runs ctcs2 testsuite and saves logs to /var/log/qa/$md5 on the target hosts.
Results can be submitted with the testsuite_submit command.

		testsuite_run <hostname>,hostname,...,<testsuite>
		Keyword arguments:
		hostname   -- hostname from the target list or "all"
		testsuite  -- testsuite-run command

- testsuite_submit
Submits the ctcs2 testsuite results to qadb.suse.de. The comment field is
populated with some attributes like SWAMPID or testsuite name, but can
also be edited before the results get submitted. Submitting results to
qadb requires the rd-qa NIS password.

		testsuite_submit <hostname>[,hostname,...],<testsuite>
		Keyword arguments:
		hostname   -- hostname from the target list or "all"
		testsuite  -- testsuite-run command

- testsuite_list
List available testsuites on the target hosts.

		testsuite_list <hostname>
		Keyword arguments:
		hostname   -- hostname from the target list or "all"

- testopia_list
List all Testopia package testcases for the current product.
If now packages are set, testcases are displayed for the current update.

		testopia_list [package,...,package]
		Keyword arguments:
		package  -- packag to display testcases for

List all Testopia package testcases for the current product

		testopia_list
		Keyword arguments:
		None

- testopia_show
Show Testopia testcase

		testopia_show <testcase>[,testcase,...,testcase]
		Keyword arguments:
		testcase   -- testcase ID

- testopia_create
Create new Testopia package testcase. An editor is spawned to process a
testcase template file.

		testopia_create <package>,<summary>
		Keyword arguments:
		package    -- package to create testcase for
		summary    -- testcase summary

- testopia_edit
Edit already existing Testopia package testcase. An editor is spawned
to process a testcase template file.

		testopia_edit <testcase>
		Keyword arguments:
		testcase -- testcase ID

Metadata Commands
*****************
- load_template
Load QA Maintenance template by md5 identifier. All changes and logs from an
already loaded template are lost if not saved previously. Already connected
hosts are kept and extended by the reference hosts defined in the
template file.

		load_template <md5>
		Keyword arguments:
		md5      -- md5 update identifier

- list_metadata
Lists patchinfo metadata like patch number, SWAMP ID or packager.

		list_metadata
		Keyword arguments:
		None

- list_bugs
Lists related bugs and corresponding Bugzilla URLs.

		list_bugs
		Keyword arguments:
		None

- list_packages
Lists current installed package versions from the targets if a target is
specified. If none is specified, all required package versions which should
be installed after the update are listed. If version 0 is shown for a package,
the package is not installed.

		list_packages [hostname]
		Keyword arguments:
		hostname -- hostname from the target list or "all"

- list_versions
Prints the package version history in chronological order.
The history of every test host is checked and consolidated.
If no packages are specified, the version history of the
update packages are shown.

		list_versions [package,...,package]
		Keyword arguments:
		package  -- packagename to show version history

- list_update_commands
List all commands which are invoked when applying updates on the target hosts.

		list_update_commands
		Keyword arguments:
		None

- list_downgrade_commands
List all commands which are invoked when downgrading packages on the target
hosts.

		list_downgrade_commands
		Keyword arguments:
		None

- list_scripts
List available scripts from the scripts subdirectory. This scripts are run in
a pre updated state and in the post updated state. Afterwards the corresponding
compare scripts are run. The subdirectory (pre/post/compare) shows in which
state the script is run. For more information, see the User Scripts section.

		list_scripts 
		Keyword arguments:
		None

- add_scripts
Add check script from the pre/post testruns

        add_scripts <script>[,script,...]
        Keyword arguments:
        script   -- script name to add to the testrun

- remove_scripts
Remove check script from the pre/post testruns

        remove_scripts <script>[,script,...]
        Keyword arguments:
        script   -- script name to remove from the testrun

- list_sessions
Lists current active ssh sessions on target hosts.

		list_sessions <hostname>
		Keyword arguments:
		hostname -- hostname from the target list or "all"


Internal Commands
*****************
- set_session_name
Set optional mtui session name as part of the prompt string. This should help
finding the corrent mtui session if multiple sessions are active.

		set_session_name [name]
		Keyword arguments:
		name     -- session name

- set_log_level 
Changes the current default MTUI loglevel "info" to "warning" or "debug". To
enable debug messages, one can set the loglevel to "debug". This could be handy
for longer running commands as the output is shown in realtime. The "warning"
loglevel prints just basic error or warning conditions. Therefore it's not
recommended to use the "warning" loglevel.

		set_log_level <loglevel>
		Keyword arguments:
		loglevel -- warning, info or debug

- set_location
Change current reference host location to another site.

		set_location <site>
		Keyword arguments:
		site     -- location name

- save
Save the testing log to a XML file. All commands and package versions are saved
there. When no parameter is given, the XML is saved to
$TEMPLATE_DIR/output/log.xml. If that file already exists and the tester doesn't
want to overwrite it, a postfix (current timestamp) is added to the filename.
The log can be used to fill the required sections of the testing template after
the testing has finished. This could be done with the convert.py script.

		save [filename]
		Keyword arguments:
		filename -- save log as file filename

- quit
Disconnects from all hosts and exits the programm. If a bootarg
argument is set, the hosts are either rebooted or powered off.
The tester is asked to save the XML log when exiting MTUI.

		quit
		Keyword arguments:
		bootarg  -- reboot or poweroff

- exit
Alias for "quit".
		exit
		Keyword arguments:
		None

- help
Prints a short help text for the requested procedure or a list of all available
function if no parameter is given.

		help [function]
		Keyword arguments:
		function -- print help text for this function

Other Commands
*****************
- checkout
Update template files from the SVN.

		checkout
		Keyword arguments:
		none

- commit
Commits the testing template to the SVN. This can be run after the testing
has finished an the template is in the final state.

		commit [message]
		Keyword arguments:
		message  -- commit message

- source_extract
Extracts source RPM to /tmp. If no filename is given, the whole package
content is extracted.
		
		source_extract [filename]
		Keyword arguments:
		filename -- filename to extract

- source_diff
Creates a source diff between the update package and the currently
installed package. If the diff needs to be against the latest
released package, make sure to run "prepare" first.

If diff type "source" is set, a package source diff is created.
This creates usually a diff of the specfile and new patchfiles.

If diff type "build" is set, a build diff is created.
This creates a diff between the patched build directories and
is usually architecture dependend.

The osc command line client needs to be installed first.

		source_diff <type>
		Keyword arguments:
		type     -- "build" or "source" diff

- source_verify
Verifies SPECFILE content. Makes sure that every Patch entry is applied.
		
		source_verify
		Keyword arguments:
		None

- source_install
Installs current source RPMs to the target hosts. 

		source_install <hostname>
		Keyword arguments:
		hostname -- hostname from the target list or "all"

- terms
Spawn terminal screens to all connected hosts. This command does actually
just run the available helper scripts. If no termname is given, all
available terminal scripts are shown.
Script name should be shell.<termname>.sh
Currently, helper scripts are available for KDE[34], GNOME and xterm.

		terms [termname]
		Keyword arguments:
		termname -- terminal emulator to spawn consoles on 

- edit
Edit a local file, the testing template, the specfile or a patch.
The evironment variable EDITOR is processed to find the prefered
editor. If EDITOR is empty, "vi" is set as default.

		edit file,<filename>
		edit template
		Keyword arguments:
		filename -- edit filename
		template -- edit template
		specfile -- edit specfile
		patch    -- edit patch


User Scripts
-------------------------
In order to automate serveral steps the tester has done manually, MTUI provides
some hooks to include user scripts for i.e. setting up the system or checking
the system state. Some of these scripts are already available in the "helper"
subdirectory. See the README file in that directory for further reading on how
these scripts are working. In short: the scripts are copied over to the
template directory and are run when invoking the "update" procedure.
The scripts which are linked to the scripts/pre/ directory
are run before the update is applied. The tester should deploy own scripts to
$TEMPLATE_DIR/scripts. This makes sure that scripts which are specific to an
update are not run on all other updates as well. All scripts in the
scripts/post/ directory are run after the update was applied. To check if
there are any regressions introduced by the update, the scripts in
scripts/compare/ are run with the output from the pre and post scripts as
parameter. The compare scripts signal possible regressions with the return
code. MTUI shows this errors to the tester who hast to decide what to do with
the findings.

All scripts with the same name form a testing group. For instance, if the
tester wants to run a qa_ testcase for the update, he should write a script
which spawns the testcase on the hosts:

#!/bin/sh
/usr/share/qa/tools/cpio-run

This script (with the name check_cpio.sh) is then linked to
scrips/pre/check_cpio.sh and scripts/post/check_cpio.sh. Now, it's run before
the update and afterwards. The output is saved to
$TEMPLATE_DIR/output/scripts/[pre|post].check_cpio.sh.$hostname. When the post
scripts have finished, the compare scripts are run. They need to have the same
name ("compare" prefix instead of "check", though) as the check script.
In this case it's compare_check_cpio.sh.

compare_check_cpio.sh is run with the previous results as parameter:
compare_check_cpio.sh \
  $TEMPLATE_DIR/output/scripts/pre.check_cpio.sh.$hostname \
  $TEMPLATE_DIR/output/scripts/post.check_cpio.sh.$hostname

If there are some unwanted differences, the compare script should return 1.
Otherwise, return 0. If the script didn't get any sensible output, 3 may be
returned to indicate the script wasn't run.


Proposed Testing Workflow
-------------------------
Invoke mtui.py with the update md5 as parameter in interactive mode and set the
testreports directory if it's not already set by the TEMPLATE_DIR environment
variable or the configuration file.
The script connects then to the reference hosts mentioned in the template file.

./mtui.py -t ~/testing/testreports/ -m 7cf90e0522b1b961e418455feb815531 -i
info: connecting to frisch.suse.de
info: connecting to merope.suse.de
info: connecting to libra.suse.de
info: connecting to sunrise.suse.de

QA > 

The interactive shell is now loaded and ready. First the tester could check if
the correct package versions are installed. By running list_packages without
parameter, the package list with the required version numbers is shown. This
versions should be higher than the versions currently installed
(list_packages all).

QA > list_packages
libibumad1-x86                : 1.2.3_20090314-0.12.1
libibumad1                    : 1.2.3_20090314-0.12.1
libibmad1                     : 1.2.3_20090314-0.12.1
libibmad1-32bit               : 1.2.3_20090314-0.12.1
libibumad1-32bit              : 1.2.3_20090314-0.12.1
libibmad1-x86                 : 1.2.3_20090314-0.12.1

QA > list_packages all
packages on libra.suse.de:
libibumad1-x86                : 0
libibumad1                    : 1.2.3_20090314-0.10.1
libibmad1                     : 1.2.3_20090314-0.10.1
libibmad1-32bit               : 0
libibumad1-32bit              : 0
libibmad1-x86                 : 0

packages on merope.suse.de:
libibumad1-x86                : 1.2.3_20090314-0.10.1
libibumad1                    : 1.2.3_20090314-0.10.1
libibmad1                     : 1.2.3_20090314-0.10.1
libibmad1-32bit               : 0
libibumad1-32bit              : 0
libibmad1-x86                 : 1.2.3_20090314-0.10.1

packages on frisch.suse.de:
libibumad1-x86                : 0
libibumad1                    : 1.2.3_20090314-0.10.1
libibmad1                     : 1.2.3_20090314-0.10.1
libibmad1-32bit               : 1.2.3_20090314-0.10.1
libibumad1-32bit              : 1.2.3_20090314-0.10.1
libibmad1-x86                 : 0

packages on sunrise.suse.de:
libibumad1-x86                : 0
libibumad1                    : 1.2.3_20090314-0.10.1
libibmad1                     : 1.2.3_20090314-0.10.1
libibmad1-32bit               : 1.2.3_20090314-0.10.1
libibumad1-32bit              : 1.2.3_20090314-0.10.1
libibmad1-x86                 : 0

If all packages are in a consistent state, the first testcase could be run. In
this case, the provides for the libraries are not correct. The output of the
run command could later be added as reproducer to the bug section of the
template.

QA > run all,rpm -q --provides libibmad1
libra.suse.de:~> rpm -q --provides libibmad1 [0]
libibmad1 = 1.2.3_20090314
libibmad.so.1  
libibmad.so.1(IBMAD_1.3)  
libibmad.so.1(libibmad.so.1)  
libibmad1 = 1.2.3_20090314-0.10.1

merope.suse.de:~> rpm -q --provides libibmad1 [0]
libibmad1 = 1.2.3_20090314
libibmad.so.1()(64bit)  
libibmad.so.1(IBMAD_1.3)(64bit)  
libibmad.so.1(libibmad.so.1)(64bit)  
libibmad1 = 1.2.3_20090314-0.10.1

frisch.suse.de:~> rpm -q --provides libibmad1 [0]
libibmad1 = 1.2.3_20090314
libibmad.so.1()(64bit)  
libibmad.so.1(IBMAD_1.3)(64bit)  
libibmad.so.1(libibmad.so.1)(64bit)  
libibmad1 = 1.2.3_20090314-0.10.1

sunrise.suse.de:~> rpm -q --provides libibmad1 [0]
libibmad1 = 1.2.3_20090314
libibmad.so.1()(64bit)  
libibmad.so.1(IBMAD_1.3)(64bit)  
libibmad.so.1(libibmad.so.1)(64bit)  
libibmad1 = 1.2.3_20090314-0.10.1

info: done

When all bugs are reproduced (be it with MTUI or per direct login on the
reference host), the update process could be started. To get more information
on the update command, please see above.
In case of errors or warnings in the update process, the tester can stop the
process if he's asked for the next step and resolve these issues first before
running update again.

QA > update all
info: preparing
info: done... [\]
start pre update scripts? (y/N) y
info: preparing script check_from_same_srcrpm.pl
info: preparing script check_all_updated.pl
info: preparing script check_vendor_and_disturl.pl
start update process? (y/N) y
info: updating
start post update scripts? (y/N) y
info: preparing script check_from_same_srcrpm.pl
info: preparing script check_all_updated.pl
info: preparing script check_vendor_and_disturl.pl
start compare scripts? (y/N) y
info: preparing script compare_from_same_srcrpm.sh
info: preparing script compare_all_updated.sh
info: preparing script compare_vendor_and_disturl.pl
info: done

After the update, the package versions and the update log could be exported
to the template file for further processing.

QA > export
info: exporting XML to /suse/ckornacker/testing/testreports//7cf90e0522b1b961e418455feb815531/log
wrote template to /suse/ckornacker/testing/testreports//7cf90e0522b1b961e418455feb815531/log

To verify that the bugs are actually fixed, one can run the reproducers again.
In this case, the provides are fixed.

QA > run all,rpm -q --provides libibmad1
libra.suse.de:~> rpm -q --provides libibmad1 [0]
libibmad = 1.2.3_20090314
libibmad.so.1  
libibmad.so.1(IBMAD_1.3)  
libibmad.so.1(libibmad.so.1)  
libibmad1 = 1.2.3_20090314-0.12.1

merope.suse.de:~> rpm -q --provides libibmad1 [0]
libibmad = 1.2.3_20090314
libibmad.so.1()(64bit)  
libibmad.so.1(IBMAD_1.3)(64bit)  
libibmad.so.1(libibmad.so.1)(64bit)  
libibmad1 = 1.2.3_20090314-0.12.1

frisch.suse.de:~> rpm -q --provides libibmad1 [0]
libibmad = 1.2.3_20090314
libibmad.so.1()(64bit)  
libibmad.so.1(IBMAD_1.3)(64bit)  
libibmad.so.1(libibmad.so.1)(64bit)  
libibmad1 = 1.2.3_20090314-0.12.1

sunrise.suse.de:~> rpm -q --provides libibmad1 [0]
libibmad = 1.2.3_20090314
libibmad.so.1()(64bit)  
libibmad.so.1(IBMAD_1.3)(64bit)  
libibmad.so.1(libibmad.so.1)(64bit)  
libibmad1 = 1.2.3_20090314-0.12.1

info: done

For regression tests the run command could be used as well. For instance,
running a ctcs testcase with "run all,/usr/share/qa/tools/*-run".
Now the tester could add the reproducers, regression tests and their
output to the template file with the edit command and a little copy + paste.
The tester just needs to set the update state to PASSED or FAILED before
submitting the template to the SVN.

QA > edit template
QA > commit
Revision 6824.

When the testing is finished, "quit" exits MTUI and disconnects from the
remote hosts while saving the XML output.
QA > quit
save log? (y/N) y
info: closing connection to libra.suse.de
info: closing connection to merope.suse.de
info: closing connection to frisch.suse.de
info: closing connection to sunrise.suse.de

